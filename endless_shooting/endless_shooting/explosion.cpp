//*****************************************************************************
//
// 爆発の処理 [explosion.cpp]
// Author : 小熊 朗
//
//*****************************************************************************

//*****************************************************************************
//マクロ定義
//*****************************************************************************
#define EXPLOSION_COUNTERANIM (3)								//アニメーションカウンター
#define EXPLOSION_PATTERNANIM (8)								//アニメーションNo.
#define BULLET_TEXTURE	  ("data/TEXTURE/explosion000.png")		//爆発テクスチャ

//*****************************************************************************
//インクルードファイル
//*****************************************************************************
#include "explosion.h"

//*****************************************************************************
//静的メンバ変数
//*****************************************************************************
LPDIRECT3DTEXTURE9	CExplosion::m_pTexture = NULL;		//テクスチャの情報

//*****************************************************************************
//コンストラクタ
//*****************************************************************************
CExplosion::CExplosion()
{

}

//*****************************************************************************
//デストラクタ
//*****************************************************************************
CExplosion::~CExplosion()
{

}

//*****************************************************************************
//クリエイト関数
//*****************************************************************************
CExplosion * CExplosion::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	CExplosion *pExplosion;
	pExplosion = NULL;
	//敵のポインタが何もなかった場合
	if (pExplosion == NULL)
	{
		pExplosion = new CExplosion;
		pExplosion->Init(pos, size);
		pExplosion->SetObjType(OBJTYPE_EXPLOSION);		//オブジェクト指定
	}
		return pExplosion;
}

//*****************************************************************************
//読み込み関数
//*****************************************************************************
HRESULT CExplosion::Load(void)
{
	//レンダリングの情報を取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		BULLET_TEXTURE, &m_pTexture);

	return S_OK;
}

//*****************************************************************************
//アンロード関数
//*****************************************************************************
void CExplosion::UnLoad(void)
{
	if (m_pTexture != NULL)
	{
		//テクスチャの破棄
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}
//*****************************************************************************
//初期化関数
//*****************************************************************************
HRESULT CExplosion::Init(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{

	CScene2D::Init(pos, size);
	//弾の初期設定
	//SetTex(D3DXVECTOR2(1.0f, 1.0f),D3DXVECTOR2(0.125f , 1.0f));
	//BirdTexture(m_pTexture);				//テクスチャの情報をscene2dに持ってく

	return S_OK;
}

//*****************************************************************************
//終了関数
//*****************************************************************************
void CExplosion::Uninit(void)
{
	CScene2D::Uninit();
}

//*****************************************************************************
//更新関数
//*****************************************************************************
void CExplosion::Update(void)
{
	D3DXVECTOR3 pos = GetPos();			//更新位置を取得
	D3DXVECTOR3 size = GetSize();				//更新サイズを取得
	
	CScene2D::Update();
	CScene2D::InitAnimation(OBJTYPE::OBJTYPE_EXPLOSION, EXPLOSION_PATTERNANIM, EXPLOSION_COUNTERANIM);
}
//*****************************************************************************
//描画関数
//*****************************************************************************
void CExplosion::Draw(void)
{
	CScene2D::Draw();
}
