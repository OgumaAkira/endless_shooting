//*****************************************************************************
//
// ゲーム画面処理 [game.cpp]
// Author : 小熊 朗
//
//*****************************************************************************

//*****************************************************************************
//インクルードファイル
//*****************************************************************************
#include "main.h"
#include "renderer.h"
#include "scene2d.h"
#include "scene.h"
#include "manager.h"
#include "game.h"
#include "player.h"


//*****************************************************************************
//静的メンバ変数
//*****************************************************************************
CGame::GAMESTATE	CGame::m_GameState = {};	//ゲーム状態

//*****************************************************************************
//コンストラクタ
//*****************************************************************************
CGame::CGame()
{

}

//*****************************************************************************
//デストラクタ
//*****************************************************************************
CGame::~CGame()
{

}

//*****************************************************************************
//クリエイト関数
//*****************************************************************************
CGame * CGame::Create()
{
	CGame *pGame = nullptr;
	if (pGame == NULL)
	{
		pGame = new CGame;
	}
	return pGame;
}

//*****************************************************************************
//初期化関数
//*****************************************************************************
void CGame::Init(CMode *pMode)
{

	srand((unsigned int)time(NULL));					//乱数の初期化
#if DEBUG_SOUND
	m_pSound = CManager::GetSound();					//サウンドの情報を取得
	m_pSound->Play(CSound::SOUND_LABEL_GAMEBGM);	//ゲームBGMを流す
#endif // DEBUG_SOUND
	m_GameState = GAMESTATE_NORMAL;						//ゲーム画面の状態は通常状態
}

//*****************************************************************************
//終了関数
//*****************************************************************************
void CGame::Uninit(void)
{
	Release();
	Select(6);
}

//*****************************************************************************
//更新関数
//*****************************************************************************
void CGame::Update(CMode *pMode)
{
	//ゲーム画面の状態
	switch (m_GameState)
	{
	//通常状態の場合
	case GAMESTATE_NORMAL:

		break;

	//スピードアップの状態の場合
	case GAMESTATE_SPEEDUP:

		break;

	//敵を倒したときの状態
	case GAMESTATE_ENEMYBREAK:

		break;

	//ゲームの状態を終了時にする
	case GAMESTATE_END:

		break;

	default:
		break;
	}
}

//*****************************************************************************
//描画関数
//*****************************************************************************
void CGame::Draw(void)
{

}

//*****************************************************************************
//乱数取得位置関数
//*****************************************************************************
D3DXVECTOR3 CGame::GetRandPos(void)
{
	// 変数宣言
	D3DXVECTOR3 returnPos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);	// 返す値
	float fPosX = 0.0f;
	float fPosY = 0.0f;

	// Randomな値を得る
	fPosX = (SCREEN_WIDTH / 2) + ((float)(rand() % 1000000) 
				/100.0f - (float)(rand() % 1000000) / 100.0f);
	fPosY = (SCREEN_HEIGHT / 2) + ((float)(rand() % 50000) 
				/ 100.0f - (float)(rand() % 50000) / 100.0f);
	
	returnPos = D3DXVECTOR3(fPosX, fPosY, 0.0f);		// 返す位置に結び付ける

	return returnPos;
}

//*****************************************************************************
//乱数取得慣性関数
//*****************************************************************************
D3DXVECTOR3 CGame::GetRandMove(void)
{
	// 変数宣言
	D3DXVECTOR3 returnMove = D3DXVECTOR3(0.0f, 0.0f, 0.0f);	// 返す値
	float fAngle = 0.0f;

	// Randomな角度を得る
	fAngle = (float)(rand() % 314) / 100.0f - (float)(rand() % 314) / 100.0f;

	// 返す移動量に結び付ける
	returnMove = D3DXVECTOR3(sinf(fAngle)*m_GameSpeed, cosf(fAngle)*m_GameSpeed, 0.0f);

	return returnMove;
}
