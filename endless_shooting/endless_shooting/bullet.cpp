//*****************************************************************************
//
// バレット処理 [bullet.cpp]
// Author : 小熊 朗
//
//*****************************************************************************

//*****************************************************************************
//マクロ定義
//*****************************************************************************
#define EFFECT_COUNTERANIM	(1)/								//アニメーションカウンター
#define EFFECT_PATTERNANIM	(16)								//アニメーションNo.
#define EFFECT_ALPHATHIN	(0.03f)								//カラーを薄くする(アルファ値減少)
#define BULLET_TEXTURE	("data/TEXTURE/bullet000.png")	//爆発テクスチャ

//*****************************************************************************
//インクルードファイル
//*****************************************************************************
#include "bullet.h"
#include "player.h"
#include "bulletUI.h"


//*****************************************************************************
//静的メンバ変数
//*****************************************************************************
LPDIRECT3DTEXTURE9		CBullet::m_pTexture = NULL;		//テクスチャの情報
CBulletUI				*CBullet::m_pBulletUI = NULL;	//残弾のポインタ

//*****************************************************************************
//コンストラクタ
//*****************************************************************************
CBullet::CBullet()
{
	m_pos = VECTOR3_DEFAULT;			//位置
	m_size = VECTOR3_DEFAULT;			//大きさ
	m_move = VECTOR3_DEFAULT;			//移動量
	m_nHP = 0;
}

//*****************************************************************************
//デストラクタ
//*****************************************************************************
CBullet::~CBullet()
{

}

//*****************************************************************************
//クリエイト関数
//*****************************************************************************
CBullet * CBullet::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size, D3DXVECTOR3 move, BULLET_TYPE type)
{
	CBullet *pBullet = NULL;

	//バレットのポインタが何も無かった場合
	if (pBullet == NULL)
	{
		pBullet = new CBullet;
		pBullet->Init(pos, size, move, type);
		pBullet->SetObjType(OBJTYPE_BULLET);	//オブジェクトタイプ指定
	}
	return pBullet;
}

//*****************************************************************************
//読み込み関数
//*****************************************************************************
HRESULT CBullet::Load(void)
{
	//レンダリングの情報を取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		BULLET_TEXTURE, &m_pTexture);

	return S_OK;
}

//*****************************************************************************
//アンロード関数
//*****************************************************************************
void CBullet::UnLoad(void)
{
	if (m_pTexture != NULL)
	{
		//テクスチャの破棄
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//*****************************************************************************
//初期化関数
//*****************************************************************************
HRESULT CBullet::Init(D3DXVECTOR3 pos, D3DXVECTOR3 size, D3DXVECTOR3 move, BULLET_TYPE type)
{
	//弾の初期設定
	CScene2D::Init(pos, size);
	m_move = move;							//移動量
	m_nHP = 1;								//ヒットポイント
	m_type = type;							//タイプ
	//BirdTexture(m_pTexture);				//テクスチャの情報をscene2dに持ってく
	SetObjType(CScene::OBJTYPE_BULLET);		//オブジェクトタイプ指定
	SetPos(m_pos);						//初期ポジション指定
	SetSize(m_size);						//初期の大きさ指定
	return S_OK;
}

//*****************************************************************************
//終了関数
//*****************************************************************************
void CBullet::Uninit(void)
{
	CScene2D::Uninit();	
}

//*****************************************************************************
//更新関数
//*****************************************************************************
void CBullet::Update(void)
{
	CScene2D::Update();
}

//*****************************************************************************
//描画関数
//*****************************************************************************
void CBullet::Draw(void)
{
	CScene2D::Draw();
}
